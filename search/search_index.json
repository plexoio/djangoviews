{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DjangoViews: Traversing Class-Based and Function-Based Views in Django","text":"<p>GitHub Repository</p> <p>Whatsapp Channel</p> <p>Author's LinkedIn</p> <p> </p> <ul> <li> <p>I meticulously analyze my own code, with a preference for using OOP through class-based views. However, I'm working as well with function-based views.</p> </li> <li> <p>The aim of this channel is to foster attention to detail, enhance comprehension, and promote versatility in Python coding, specifically within the Django framework.</p> </li> <li> <p>To prevent the feeling of being overwhelmed, commonly experienced on other social platforms, I employ progressive disclosure and get straight to the point.</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Responsive Documentation</li> <li>Internal Search Engine</li> <li>Colored Code Blocks</li> <li>Light/Dark Mode Toggle</li> <li>WhatsApp Channel</li> </ul> Conception Date <ul> <li>Oct 25, 2023 \ud83d\udcc5</li> </ul> Last Update <ul> <li>Dec 19, 2023 \ud83d\udcc5</li> </ul> No License <p>You cannot reproduce, distribute, or create derivative works from this project.</p> Support <p> </p>"},{"location":"about/LICENSE/","title":"License","text":"<p>Copyright \u00a9 2023 by Frank Arellano</p> <p>All rights reserved.</p> <p>All rights to the software and associated documentation files (the \"Software\") are reserved by Frank Arellano No rights are granted to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of the Software, and no permissions are given to persons to whom the Software might otherwise be furnished, except as expressly stated herein or with the express written permission of Frank Arellano.</p> <ol> <li> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> </li> <li> <p>You cannot reproduce, distribute, or create derivative works from this project without the express written permission of the copyright holder.</p> </li> <li> <p>Any use or exploitation of this software without the express written agreement of the copyright holder is prohibited and will be prosecuted to the fullest extent of the law.</p> </li> </ol> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> Support <p> </p>"},{"location":"about/about/","title":"About Me","text":"<p>\ud83d\udc4b Hello and Welcome!</p> <p>My life has been a ceaseless journey of learning and self-discovery, shaped by a wide array of experiences. From traversing multiple countries to immersing myself in diverse cultures, I've honed my adaptability and versatility every step of the way.</p> <p>\ud83d\udcda Interests Turned Passions</p> <p>I've explored literature, philosophy, and education only to find my deepest passions residing in the fields of science and technology. That's why I took the plunge to specialize, earning a Full Stack Software Development Diploma from Code Institute. Currently doing a Grand Master in Big Data &amp; Blockchain at Tech University.</p> <p>\ud83d\udc68\u200d\ud83d\udcbb Professional Journey</p> <p>I've been particularly focused on creating digital solutions that bring value to both businesses and their users. My project portfolio is a testament to this. They embody my meticulous attention to detail, security, Design Thinking, Agile Development, and User-Centric Design.</p> <p>\ud83d\udee0 Tech Stack</p> <ul> <li>HTML, CSS, JavaScript, Python</li> <li>Design Thinking</li> <li>Agile Development</li> <li>User-Centric Design</li> <li>User Experience (UE) &amp; User Interface (UI) Design (UXD)</li> <li>E-commerce, SEO &amp; Web Marketing</li> </ul> <p>\ud83c\udf31 Why I'm on LinkedIn</p> <p>I'm excited about opportunities to apply my skills to real-world challenges. Companies known for innovation and excellence particularly interest me. I'm also eager to collaborate in team hackathons and other creative, tech-driven endeavors.</p> <p>Feel free to connect or reach out if you think we can collaborate or learn from each other. Whether it's for the current job market or future opportunities, I'm always excited to discuss potential synergies.</p> <p>\ud83d\ude4f Thanks for stopping by!</p> <p>Yours Sincerely,  Frank Arellano</p> Support <p> </p>"},{"location":"credits/credits/","title":"Acknowledgement","text":"<ul> <li>Django Project: Django makes it easier to build better web apps more quickly and with less code.</li> <li>Am I Responsive?: for the creation of the mockup images.</li> <li>MkDocs: used to create the documentation site hosted on Github Pages.</li> <li>MkDocs Material: package to extend MkDocs functionalities and make it more user-centric.</li> <li>STUNNING Code Documentation With MkDocs Material Theme: tutorial to install &amp; manage MkDocs Material by James Willett.</li> <li>Stackoverflow: for in-depth consultation and checking user-created content (from experienced developers) or human opinion.</li> <li>Google: for programming queries.</li> <li>Code Institute: for providing proper education and the Full Gitpod Template.</li> <li>ChatGPT: it was used for the following queries:<ol> <li>Used for general consulting.</li> <li>Copywriting and proofreading.</li> </ol> </li> </ul> Support"},{"location":"fbvs/overview/","title":"Overview","text":"<p>Welcome to the FBVs (Function-Based Views) section, where we will navigate through various functions used in actual production code in Django.</p> <p>Although not all the code is fully efficient or polished, it will serve its purpose, which is to help us understand what's going on behind scenes. This will ultimately help us comprehend what's right in front of our eyes.</p> <p>Gaining this understanding will enhance our versatility as coders, fueling our creativity and problem-solving skills.</p> Quote <p>There's no greater satisfaction than being able to explain our own code.</p> <p>If you're not yet familiar with FBVs (Function-Based Views), please visit the following section:</p> <ul> <li>What is FBVs?</li> </ul>"},{"location":"fbvs/fbvs/fbvs/","title":"What Are FBVs?","text":""},{"location":"fbvs/fbvs/fbvs/#overview","title":"Overview","text":"<p>In Django, you have the option to use either class-based views (CBVs) or function-based views (FBVs). Class-based views are indeed often associated with Object-Oriented Programming (OOP) because they allow for better reuse and composition(modularity) of code by utilizing inheritance and mixins.</p> Quote <p>\"Building complex views by combining simpler, reusable components.\" - Django Design Philosophy/OOP Principles</p> <p>Function-based views, on the other hand, are more procedural in nature. They are simpler and more explicit, which can make them easier to understand for certain tasks. They are not generally categorized under a specific programming paradigm like OOP, but they are more aligned with the procedural or functional programming styles.</p>"},{"location":"fbvs/fbvs/fbvs/#function-based-view-example","title":"Function-Based View Example","text":"<p>And here's its equivalent function-based view:</p> <pre><code>from django.http import HttpResponse\n\ndef my_view(request):\n    return HttpResponse('Hello, this is a function-based view.')\n</code></pre> <p>OR</p> <pre><code>from django.shortcuts import render\n\ndef my_view(request):\n    \"\"\"\n    Handle HTTP GET requests and render a specified template.\n\n    This function-based view takes an HttpRequest object as input and\n    returns an HttpResponse object after rendering the 'about/about.html'\n    template.\n\n    Args:\n        request (HttpRequest): The request object from the client.\n\n    Returns:\n        HttpResponse: The rendered template as an HTTP response.\n\n    \"\"\"\n    template_name = 'about/about.html'\n    return render(request, template_name)\n</code></pre>"},{"location":"fbvs/fbvs/fbvs/#class-based-view-example","title":"Class-Based View Example","text":"<p>Here's a simple class-based view that handles HTTP GET requests:</p> <pre><code>from django.http import HttpResponse\nfrom django.views import View\n\nclass MyView(View):\n    def get(self, request):\n        return HttpResponse('Hello, this is a class-based view.')\n</code></pre> <p>OR</p> <pre><code>from django.shortcuts import render\nfrom django.views import View\n\nclass MyView(View):\n    \"\"\"\n    MyView is a Django class-based view that handles HTTP GET requests\n    and renders a template.\n\n    Attributes:\n        template_name (str): The name of the template to be rendered.\n                             Defaults to 'about/about.html'.\n\n    Methods:\n        get(request): Handles GET requests and renders the specified\n                      template.\n    \"\"\"\n    template_name = 'about/about.html'\n\n    def get(self, request):\n        return render(request, self.template_name)\n</code></pre>"},{"location":"fbvs/fbvs/fbvs/#logic-and-sense","title":"Logic and Sense","text":"<ol> <li> <p>Function-Based Views: These are straightforward and easy to understand, making them suitable for simple use-cases or for developers who are just getting started with Django. They make the logic explicit and are usually easier to follow for simple tasks. Uses \"Explicit is better than implicit\" principle, one of the core tenets of Python's philosophy.</p> </li> <li> <p>Class-Based Views (OOP): When you're building large or complex applications, CBVs can offer advantages in terms of reusability and composability. You can create base views that handle common patterns and then extend them for specialized use-cases. Don't Repeat Yourself\" (DRY) principle is well applied here.</p> </li> </ol> <p>In summary:</p> <ul> <li>Function-based views are more about \"what it does\" (e.g., it handles a GET request in this specific way).</li> <li>Class-based views are more about \"what it is\" (e.g., it's a DetailView, it's a ListView).</li> </ul> <p>Both can achieve the same end result but offer different organizational structures for your code.</p>"},{"location":"oop/overview/","title":"Overview","text":"<p>Welcome to the CBVs (Class-Based Views) section, where we will navigate through various classes used in actual production code in Django.</p> <p>Although not all the code is fully efficient or polished, it will serve its purpose, which is to help us understand what's going on behind scenes. This will ultimately help us comprehend what's right in front of our eyes.</p> <p>Gaining this understanding will enhance our versatility as coders, fueling our creativity and problem-solving skills.</p> Quote <p>There's no greater satisfaction than being able to explain our own code.</p> <p>If you're not yet familiar with OOP (Object Oriented Programming) or CBVs, please visit the following section:</p> <ul> <li>What is CBVs?</li> </ul>"},{"location":"oop/class/class/","title":"What Are CBVs?","text":""},{"location":"oop/class/class/#overview","title":"Overview","text":"<p>In Django, you have the option to use either class-based views (CBVs) or function-based views (FBVs). Class-based views are indeed often associated with Object-Oriented Programming (OOP) because they allow for better reuse and composition (modularity) of code by utilizing inheritance and mixins.</p> Quote <p>\"Building complex views by combining simpler, reusable components.\" - Django Design Philosophy/OOP Principles</p> <p>Function-based views, on the other hand, are more procedural in nature. They are simpler and more explicit, which can make them easier to understand for certain tasks. They are not generally categorized under a specific programming paradigm like OOP, but they are more aligned with the procedural or functional programming styles.</p>"},{"location":"oop/class/class/#class-based-view-example","title":"Class-Based View Example","text":"<p>Here's a simple class-based view that handles HTTP GET requests:</p> <pre><code>from django.http import HttpResponse\nfrom django.views import View\n\nclass MyView(View):\n    def get(self, request):\n        return HttpResponse('Hello, this is a class-based view.')\n</code></pre> <p>OR</p> <pre><code>from django.shortcuts import render\nfrom django.views import View\n\nclass MyView(View):\n    \"\"\"\n    MyView is a Django class-based view that handles HTTP GET requests\n    and renders a template.\n\n    Attributes:\n        template_name (str): The name of the template to be rendered.\n                             Defaults to 'about/about.html'.\n\n    Methods:\n        get(request): Handles GET requests and renders the specified\n                      template.\n    \"\"\"\n    template_name = 'about/about.html'\n\n    def get(self, request):\n        return render(request, self.template_name)\n</code></pre>"},{"location":"oop/class/class/#function-based-view-example","title":"Function-Based View Example","text":"<p>And here's its equivalent function-based view:</p> <pre><code>from django.http import HttpResponse\n\ndef my_view(request):\n    return HttpResponse('Hello, this is a function-based view.')\n</code></pre> <p>OR</p> <pre><code>from django.shortcuts import render\n\ndef my_view(request):\n    \"\"\"\n    Handle HTTP GET requests and render a specified template.\n\n    This function-based view takes an HttpRequest object as input and\n    returns an HttpResponse object after rendering the 'about/about.html'\n    template.\n\n    Args:\n        request (HttpRequest): The request object from the client.\n\n    Returns:\n        HttpResponse: The rendered template as an HTTP response.\n\n    \"\"\"\n    template_name = 'about/about.html'\n    return render(request, template_name)\n</code></pre>"},{"location":"oop/class/class/#logic-and-sense","title":"Logic and Sense","text":"<ol> <li> <p>Class-Based Views (OOP): When you're building large or complex applications, CBVs can offer advantages in terms of reusability and composability. You can create base views that handle common patterns and then extend them for specialized use-cases. Don't Repeat Yourself\" (DRY) principle is well applied here.</p> </li> <li> <p>Function-Based Views: These are straightforward and easy to understand, making them suitable for simple use-cases or for developers who are just getting started with Django. They make the logic explicit and are usually easier to follow for simple tasks. Uses \"Explicit is better than implicit\" principle, one of the core tenets of Python's philosophy.</p> </li> </ol> <p>In summary:</p> <ul> <li>Class-based views are more about \"what it is\" (e.g., it's a DetailView, it's a ListView).</li> <li>Function-based views are more about \"what it does\" (e.g., it handles a GET request in this specific way).</li> </ul> <p>Both can achieve the same end result but offer different organizational structures for your code.</p>"},{"location":"oop/class/django_views/","title":"What Are Django Views?","text":"<p>In Django, there are built-in class-based views (15+) that provide a higher-level structure for handling common web application tasks. We will use them throughout our project. Let's discuss these views using Object-Oriented Programming (OOP) principles:</p> Quick Insight <p>Django provides several built-in class-based views, and the number may have increased with subsequent releases. These core views cover a range of common tasks encountered in web development. Here are some of the key class-based views:</p> <ol> <li> <p>View:</p> <ul> <li>The base class for all views.</li> </ul> </li> <li> <p>TemplateView:</p> <ul> <li>Renders a template.</li> </ul> </li> <li> <p>RedirectView:</p> <ul> <li>Redirects to a specified URL.</li> </ul> </li> <li> <p>ListView:</p> <ul> <li>Displays a list of objects.</li> </ul> </li> <li> <p>DetailView:</p> <ul> <li>Displays the details of a single object.</li> </ul> </li> <li> <p>CreateView:</p> <ul> <li>Handles the creation of new objects.</li> </ul> </li> <li> <p>UpdateView:</p> <ul> <li>Handles updating existing objects.</li> </ul> </li> <li> <p>DeleteView:</p> <ul> <li>Handles the deletion of objects.</li> </ul> </li> <li> <p>FormView:</p> <ul> <li>Handles forms and form submissions.</li> </ul> </li> <li> <p>ArchiveIndexView, YearArchiveView, MonthArchiveView, DayArchiveView:</p> <ul> <li>Views for displaying date-based archives.</li> </ul> </li> <li> <p>ArchiveDetailView:</p> <ul> <li>Displays the details of an object in a date-based archive format.</li> </ul> </li> <li> <p>TemplateResponseMixin:</p> <ul> <li>A mixin class that provides rendering a template.</li> </ul> </li> <li> <p>ContextMixin:</p> <ul> <li>A mixin class that provides methods for adding extra context to the view.</li> </ul> </li> <li> <p>MultipleObjectMixin, SingleObjectMixin:</p> <ul> <li>Mixins for working with multiple or single objects in views.</li> </ul> </li> <li> <p>StaticView:</p> <ul> <li>A view to serve static files.</li> </ul> </li> </ol> <p>Note that Django is actively developed, and new features, including new class-based views, may have been added in subsequent releases. It's a good practice to refer to the official Django documentation for the most up-to-date information on class-based views: Django Class-Based Views</p>"},{"location":"oop/class/django_views/#insights-to-django-views","title":"Insights to Django Views","text":"<p>Now let's dive into them:</p> <ol> <li> <p>View:</p> <ul> <li>Purpose: The <code>View</code> class is like an abstract base class for your class-based views in Django. It provides a foundation for handling HTTP requests and responses.</li> </ul> <pre><code>from django.views import View\nfrom django.http import HttpResponse\n\nclass MyView(View):\n    def get(self, request):\n        # Your view logic here\n        return HttpResponse(\"Hello, World!\")\n</code></pre> Other <code>View Class</code> Methods <p>In Django's class-based views, such as the example you provided (<code>class MyView(View)</code>), you can override various methods to customize the behavior of the view. Here are some commonly used methods that you can override in a basic <code>View</code>:</p> <ol> <li> <p><code>get(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles GET requests.</li> <li>Example: This is where you would put the logic for processing GET requests.</li> </ul> </li> <li> <p><code>post(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles POST requests.</li> <li>Example: Useful for processing form submissions or any action that modifies data on the server.</li> </ul> </li> <li> <p><code>put(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles PUT requests.</li> <li>Example: Typically used for updating resources on the server.</li> </ul> </li> <li> <p><code>patch(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles PATCH requests.</li> <li>Example: Similar to <code>put</code>, but used for partial updates to resources.</li> </ul> </li> <li> <p><code>delete(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles DELETE requests.</li> <li>Example: Used for deleting resources on the server.</li> </ul> </li> <li> <p><code>head(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles HEAD requests.</li> <li>Example: Similar to GET, but without the response body. Used to check if a resource has changed.</li> </ul> </li> <li> <p><code>options(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Handles OPTIONS requests.</li> <li>Example: Provides information about the communication options for the target resource.</li> </ul> </li> <li> <p><code>http_method_not_allowed(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Called for HTTP methods that are not allowed.</li> <li>Example: Customize the behavior when an unsupported HTTP method is used.</li> </ul> </li> <li> <p><code>setup(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: Runs at the beginning of each request before other methods are called.</li> <li>Example: Useful for setting up any necessary resources or configurations.</li> </ul> </li> <li> <p><code>dispatch(self, request, *args, **kwargs)</code>:</p> <ul> <li>Purpose: The central dispatcher for the view. Calls the appropriate method based on the HTTP method of the request.</li> <li>Example: Override this if you need custom dispatching logic.</li> </ul> </li> </ol> <p>These methods provide hooks at different stages of the view processing lifecycle. By overriding them, you can customize the behavior of your view based on the specific needs of your application. In your example, the <code>get</code> method is overridden to handle GET requests, but you can choose to override other methods based on the type of requests you expect to handle in your view.</p> <p>In OOP terms, <code>View</code> is an abstract class, and <code>MyView</code> is your subclass that overrides its methods to handle specific HTTP request types.</p> </li> <li> <p>ListView: </p> <ul> <li>Purpose: <code>ListView</code> is a class for displaying a list of items from a database model/table. It encapsulates the logic for retrieving and rendering a list of objects/instances of that model.</li> </ul> <pre><code>from django.views.generic import ListView\nfrom .models import MyModel\n\nclass MyModelListView(ListView):\n    model = MyModel\n    template_name = 'my_model_list.html'\n</code></pre> <p>In OOP terms, <code>ListView</code> is like a class that specializes in displaying lists of objects (instances of <code>MyModel</code> in our case), and we need <code>MyModelListView</code> as a subclass that configures it for a specific model and template.</p> </li> <li> <p>DetailView:</p> <ul> <li>Purpose: <code>DetailView</code> is used to display the details of a single object/instance from a database model. It encapsulates the logic for retrieving and rendering a single object.</li> </ul> <pre><code>from django.views.generic import DetailView\nfrom .models import MyModel\n\nclass MyModelDetailView(DetailView):\n    model = MyModel\n    template_name = 'my_model_detail.html'\n</code></pre> <p>In OOP terms, <code>DetailView</code> is like a class specialized for displaying details of a single object, and <code>MyModelDetailView</code> is a subclass configured for a specific model and template.</p> <p>These class-based views (above) are a way of applying OOP principles to web development. They serve as templates for defining view behavior (controller) in a structured and reusable manner, making it easier to manage complex web applications. Each view class provides a specific set of methods to handle different HTTP request types, allowing for more organized and maintainable code:</p> Quote <p>It's like assigning names to things in your room and then classifying them into special sets for easy manipulation, maintenance, and control.</p> <p>In addition to the basic views like <code>View</code>, <code>ListView</code>, and <code>DetailView</code>, Django provides various other built-in class-based views to handle common web development tasks. Here are some of the commonly used ones:</p> </li> <li> <p>CreateView:</p> <ul> <li>Purpose: <code>CreateView</code> is used for handling the creation of new objects, typically when submitting forms. It encapsulates the logic for creating and saving a new instance of a model.</li> </ul> </li> <li> <p>UpdateView:</p> <ul> <li>Purpose: <code>UpdateView</code> is used to update existing objects, often in response to form submissions. It handles retrieving, updating, and saving changes to an existing model instance.</li> </ul> </li> <li> <p>DeleteView:</p> <ul> <li>Purpose: <code>DeleteView</code> is used for deleting objects. It provides the logic to display a confirmation page and, upon confirmation, delete the specified object.</li> </ul> </li> <li> <p>RedirectView:</p> <ul> <li>Purpose: <code>RedirectView</code> is used to perform URL redirections. It allows you to define rules for redirecting requests from one URL pattern to another.</li> </ul> </li> <li> <p>TemplateView:</p> <ul> <li>Purpose: <code>TemplateView</code> is for rendering HTML templates along with data. It's commonly used to display static content or pages with minimal dynamic data.</li> </ul> </li> <li> <p>ArchiveIndexView:</p> <ul> <li>Purpose: <code>ArchiveIndexView</code> is used for displaying a list of objects in a date-based archive format. It's often used for blog post archives.</li> </ul> </li> <li> <p>YearArchiveView, MonthArchiveView, DayArchiveView:</p> <ul> <li>Purpose: These views are for displaying object lists by year, month, and day, respectively, in a date-based archive format.</li> </ul> </li> <li> <p>ArchiveDetailView:</p> <ul> <li>Purpose: <code>ArchiveDetailView</code> displays the details of an object in a date-based archive format, typically used for blog posts or news articles.</li> </ul> </li> <li> <p>FormView:</p> <ul> <li>Purpose: <code>FormView</code> is used for rendering and processing forms. It can be customized to display and handle different types of forms.</li> </ul> </li> <li> <p>View Mixins:</p> <ul> <li>Purpose: Django provides various mixins, such as <code>LoginRequiredMixin</code> and <code>PermissionRequiredMixin</code>, that can be combined with other views to add additional functionality. For example, <code>LoginRequiredMixin</code> ensures that only authenticated users can access a view.</li> </ul> </li> <li> <p>API Views (Django REST framework):</p> <ul> <li>Purpose: If you are building a RESTful API, you can use views provided by the Django REST framework. These include <code>APIView</code>, <code>ListAPIView</code>, <code>RetrieveAPIView</code>, <code>CreateAPIView</code>, <code>UpdateAPIView</code>, and <code>DestroyAPIView</code>, among others, for handling API requests.</li> </ul> </li> <li> <p>Custom Views:</p> <ul> <li>Purpose: You can create custom views by defining your own view classes. These views can encapsulate specific logic and handle various tasks tailored to your application's needs.</li> </ul> </li> </ol> <p>These are just some examples of the built-in class-based views provided by Django. Depending on your project requirements, you can use these views as a starting point and customize them to suit your application's specific needs.</p>"},{"location":"oop/class/django_views/#insights-to-templateview","title":"Insights to TemplateView","text":"<p>Here's an example of a <code>TemplateView</code> in Django. In this example, we'll create a simple TemplateView that renders an HTML template along with some context data. You can also directly call the model within the template without explicitly overriding the get_context_data method:</p> <pre><code># views.py\nfrom django.views.generic import TemplateView\n\nclass MyTemplateView(TemplateView):\n    template_name = 'templates/my_template.html'\n\n    def get_context_data(self, **kwargs):\n        context = {\n            'name': 'Frank',\n            'age': 30,\n        }\n        return context\n</code></pre> <p>In this code:</p> <ol> <li> <p>We import <code>TemplateView</code> from <code>django.views.generic</code>.</p> </li> <li> <p>We create a class named <code>MyTemplateView</code> that inherits from <code>TemplateView</code>.</p> </li> <li> <p>We specify the <code>template_name</code> attribute, which is the name of the HTML template we want to render. In this example, it's named <code>'templates/my_template.html'</code>. Ensure that the template file exists in the appropriate template directory of your Django project.</p> </li> <li> <p>We override/define the <code>get_context_data</code> method to provide context data to the template. In this case, we include two variables, <code>name</code> and <code>age</code>, in the context dictionary.</p> </li> </ol> <p>Now, when a user accesses the URL associated with <code>MyTemplateView</code>, it will render the <code>'my_template.html'</code> template with the provided context data. The template can use the <code>name</code> and <code>age</code> variables to display information, and you can customize the template as needed (frontend).</p>"},{"location":"oop/class/django_views/#second-option","title":"Second Option","text":"<p>You can use <code>TemplateView</code> to render a list of items as well, not limited to static rendering. While <code>ListView</code> is specifically designed for displaying lists of objects from a queryset, <code>TemplateView</code> gives you more flexibility to define your own logic for displaying data. </p> Quote <p>We provide this explanation because you can extrapolate these ideas to interact with the templates while using other views.</p> <p>Here's an example of using <code>TemplateView</code> to display a list of items:</p> <pre><code># models.py\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n# views.py\nfrom django.views.generic import TemplateView\nfrom .models import MyModel\n\nclass MyTemplateListView(TemplateView):\n    template_name = 'templates/my_template_list.html'\n\n    def get_context_data(self, **kwargs):\n        context = {\n            'my_model_list': MyModel.objects.all(),\n        }\n        return context\n</code></pre> <p>In this example:</p> <ol> <li> <p>We have a simple model <code>MyModel</code> with a <code>name</code> field.</p> </li> <li> <p>We create a <code>MyTemplateListView</code> class that inherits from <code>TemplateView</code>.</p> </li> <li> <p>We specify the <code>template_name</code> attribute, pointing to the HTML template (<code>'templates/my_template_list.html'</code>) that will render the list.</p> </li> <li> <p>In the <code>get_context_data</code> method, we retrieve all instances of <code>MyModel</code> and include them in the context as <code>my_model_list</code>.</p> </li> </ol>"},{"location":"oop/class/django_views/#third-option","title":"Third Option","text":"<p>In a <code>TemplateView</code>, you can directly call the model within the template without explicitly overriding the <code>get_context_data</code> method. The view can still pass the model instances to the template, and you can access them directly in the template.</p> <p>Here's an example:</p> <pre><code># views.py\nfrom django.views.generic import TemplateView\nfrom .models import MyModel\n\nclass MyTemplateListView(TemplateView):\n    template_name = 'my_template_list.html'\n    context_data_name = 'my_model_list'\n\n    def get_queryset(self):\n        return MyModel.objects.all()\n</code></pre> <p>In this example:</p> <ol> <li>We use the <code>get_queryset</code> method to retrieve the queryset of <code>MyModel</code> instances. This method is similar to what you would use in a <code>ListView</code>, but since we're not directly using it to display a list, we don't need to override <code>get_context_data</code>.</li> </ol> <p>Now, in your template (<code>my_template_list.html</code>), you can directly access the queryset:</p> <pre><code>&lt;!-- my_template_list.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Model List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My Model List&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for item in my_model_list %}\n            &lt;li&gt;{{ item.name }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Here, we use <code>my_model_list</code> instead of  <code>object_list</code> (the default context variable) because we are redefining <code>context_data_name</code> class attribute. The name chosen represents the queryset returned by <code>get_queryset</code>. The loop then iterates over <code>my_model_list</code> to get each item in the queryset and displays the <code>name</code> attribute.</p> <p>This approach is more concise if you don't need to customize the context data extensively. It leverages the default behavior of <code>TemplateView</code> to pass the queryset to the template without the need for explicit context data overriding.</p>"},{"location":"oop/class/django_views/#a-journey-of-exploration","title":"A Journey of Exploration","text":"<p>In the course of this project, we will embark on a captivating journey through different Django views. Each view, with its unique purpose and functionality, will be unravelled to deepen your comprehension of the Django framework.</p> <p>As we traverse the landscape of class-based views, you'll witness a diverse range of functionalities, from rendering templates to handling forms, displaying lists, and managing details. This exploration is not merely about following predefined paths but about encouraging you to navigate, experiment, and understand the intricacies of each view.</p> <p>The goal is not just mastery but the cultivation of your creative instincts. You'll be prompted to infuse your own ideas and solutions into the code, shaping Django views to align with the distinctive requirements of your projects. This hands-on approach will not only build your technical proficiency but also fuel your creative expression.</p> <p>So, fasten your seatbelt as we venture into the world of Django views. Let the exploration begin, and let your creativity thrive!</p>"},{"location":"oop/traversing/login_view/","title":"CustomLoginView","text":""},{"location":"oop/traversing/login_view/#loginview","title":"LoginView","text":"<p>Today, we are excited to traverse the abstractions used in the following CustomLoginView &amp; LoginView classes:</p> <pre><code>class CustomLoginView(LoginView):\n    \"\"\"This view renders our custom login form\"\"\"\n    form_class = CustomLoginForm\n    template_name = 'account/login.html'\n</code></pre>"},{"location":"oop/traversing/login_view/#what-is-it","title":"What is it?","text":"<p>Django is a framework, which means it offers built-in reusable components. One of these is <code>LoginView</code>. In our case, we're enhancing this by inheriting from it via the <code>django-allauth</code> package, sourced from the <code>allauth.account.views</code> module:</p> <pre><code>from allauth.account.views import LoginView\n</code></pre> <ul> <li>This additional layer of functionality allows for features like social authentication and email verification.</li> </ul> <p>That said, you'll need to install the package beforehand:</p> <pre><code>pip install django-allauth\n</code></pre> <p>If you choose not to install it, you will retain the core functionality described below, minus the additional features provided by <code>allauth</code>.</p> Quote <p>The process is simple: install <code>django-allauth</code>, inherit from its <code>LoginView</code>, and override the default attributes to customize it according to your needs.</p>"},{"location":"oop/traversing/login_view/#what-does-it-do","title":"What Does it Do?","text":"<p><code>LoginView</code> enables code reusability, eliminating the need to \"reinvent the wheel.\" You'd otherwise have to build your own login mechanism, which would require significant effort in both logic and security\u2014elements that have already been taken care of.</p> <p>You have access to methods like <code>get()</code>, <code>post()</code>, <code>get_form_class()</code>, <code>form_valid()</code>, <code>get_context_data()</code>, and <code>get_success_url()</code>.</p> <p>The <code>form_class</code> attribute (another name for a variable but in OOP terms) specifies the form we intend to use. Likewise, <code>template_name</code> designates the template where our form, HTML, JavaScript, and CSS will be rendered. Both <code>form_class</code> and <code>template_name</code> are attributes of the class.</p> <p>You can also extend the context to include more information by overriding <code>get_context_data()</code>:</p> <pre><code># Inside our CustomLoginView class:\n\ndef get_context_data(self, **kwargs):\n    context = super().get_context_data(**kwargs)\n    context['extra_info'] = 'This is some extra information.'\n    return context\n</code></pre>"},{"location":"oop/traversing/login_view/#how-does-it-work","title":"How Does It Work?","text":"<ol> <li>Create a Subclass: Inherit from the imported <code>LoginView</code>:</li> </ol> <pre><code>from allauth.account.views import LoginView\n\nclass CustomLoginView(LoginView):\n    # code pending\n</code></pre> <ol> <li>Specify Custom Functionality: Override <code>LoginView</code>'s default attributes with your custom configurations:</li> </ol> <pre><code>from .forms import CustomLoginForm\n\nclass CustomLoginView(LoginView):\n    form_class = CustomLoginForm\n</code></pre> <p>Note how we're importing a custom form, thus overriding either the package's or Django's default form.</p> <ol> <li>Specify the Template:</li> </ol> <pre><code>class CustomLoginView(LoginView):\n    \"\"\"This view renders our custom login form\"\"\"\n    form_class = CustomLoginForm\n    template_name = 'account/login.html'\n</code></pre> <p>This allows you to render your form within a customizable template.</p>"},{"location":"oop/traversing/login_view/#insights-clean-code","title":"Insights &amp; Clean Code","text":"Insights<pre><code>from django.contrib import messages\n\nclass CustomLoginView(LoginView):\n    form_class = CustomLoginForm\n    template_name = 'account/login.html'\n\n    def form_valid(self, form):\n        # Call the parent class's form_valid method and store its return value\n        response = super().form_valid(form)\n        # Custom logic\n        username = form.cleaned_data.get('username')\n        messages.success(self.request, f'Welcome, {username}!')\n        # Return the HttpResponse object\n        return response\n\n    def form_invalid(self, form):\n        messages.error(self.request, 'Login failed. Please try again.')\n        # Call the parent class's form_invalid method and return its value\n        return super().form_invalid(form)\n</code></pre> <p>Here, <code>response = super().form_valid(form)</code> performs the following functions:</p> <ol> <li><code>super()</code>: This returns a temporary object of the superclass, allowing you to call its methods.</li> <li><code>.form_valid(form)</code>: This calls the form_valid method of the superclass. In Django, this method usually handles what to do with a valid form, such as saving a model object.</li> <li><code>response =</code>: This stores the result of <code>super().form_valid(form)</code>\u2014often an HttpResponse object like a redirect\u2014in the variable <code>response</code>.</li> </ol> <p>The <code>form</code> argument passed into <code>form_valid</code> and <code>form_invalid</code> is an instance of <code>CustomLoginForm</code>, as specified by <code>form_class</code>.</p> <p>The <code>cleaned_data</code> object is created after form validation upon submission. You can then use <code>.get()</code> to retrieve specific key-value pairs.</p> Clean Code<pre><code>from django.contrib import messages\nfrom allauth.account.views import LoginView\n\nclass CustomLoginView(LoginView):\n    form_class = CustomLoginForm\n    template_name = 'account/login.html'\n\n    def form_valid(self, form):\n        response = super().form_valid(form)\n        username = form.cleaned_data.get('username')\n        messages.success(self.request, f'Welcome, {username}!')\n        return response\n\n    def form_invalid(self, form):\n        messages.error(self.request, 'Login failed. Please try again.')\n        return super().form_invalid(form)\n</code></pre>"},{"location":"oop/traversing/logout_view/","title":"CustomLogoutView","text":""},{"location":"oop/traversing/logout_view/#logoutview","title":"LogoutView","text":"<p>In this section, we'll delve into the features and customization options of your <code>CustomLogoutView</code>. Similar to the CustomSignupView, this view extends the functionality of a base class, specifically the <code>LogoutView</code> from <code>django-allauth</code>:</p> <pre><code>class CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n</code></pre>"},{"location":"oop/traversing/logout_view/#what-is-it","title":"What is it?","text":"<p>Similar to the CustomSignupView, the <code>CustomLogoutView</code> inherits from a class provided by the <code>django-allauth</code> package, specifically the <code>LogoutView</code>. It allows you to customize the logout process according to your project's needs.</p> <p>Before using the <code>CustomLogoutView</code>, make sure to install the required package:</p> <pre><code>pip install django-allauth\n</code></pre> <p>In your views module, import the necessary class:</p> <pre><code>from allauth.account.views import LogoutView\n</code></pre> Quote <p>The process is simple: install <code>django-allauth</code>, inherit from its <code>LogoutView</code>, and override the default attributes to customize it according to your needs.</p>"},{"location":"oop/traversing/logout_view/#what-does-it-do","title":"What Does it Do?","text":"<p>The primary purpose of <code>CustomLogoutView</code> is to handle the user logout process. By inheriting from <code>LogoutView</code>, you leverage the functionality provided by the <code>django-allauth</code> package to streamline the logout experience.</p> <ol> <li> <p>Redirect After Logout </p> <p>You can specify a custom redirect URL after logout by either <code>get_next_url</code> or <code>LOGOUT_REDIRECT_URL</code>:</p> <ul> <li>Overriding the <code>get_next_url</code> method:</li> </ul> <pre><code>class CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n\n    def get_next_url(self):\n        # Specify the custom redirect URL after logout\n        return '/custom-redirect/'\n</code></pre> <p>You can explore other options such as:</p> <pre><code>class CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n\n    def get_next_url(self):\n        # Check user type and redirect accordingly\n        if self.request.user.is_staff:\n            return '/admin-dashboard/'\n        else:\n            return '/user-dashboard/'\n</code></pre> <ul> <li>Setting the <code>LOGOUT_REDIRECT_URL</code> in your <code>settings.py</code>:</li> </ul> <pre><code># settings.py\nLOGOUT_REDIRECT_URL = '/custom-redirect/'\n</code></pre> <p>By utilizing the <code>LOGOUT_REDIRECT_URL</code> setting, you can centrally manage the redirect URL for all logout views in your project.</p> </li> <li> <p>Confirmation Messages </p> <p>Provide a confirmation message to the user upon successful logout using the Django messages framework <code>from django.contrib import messages</code>:</p> <pre><code>from django.contrib import messages\n\nclass CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n\n    def logout(self):\n        response = super().logout()\n        messages.success(self.request, 'You have been successfully logged out.')\n        return response\n</code></pre> </li> <li> <p>Custom Logic Before Logout</p> <p>Execute custom logic before the user is logged out by overriding the <code>logout</code> method:</p> <pre><code>class CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n\n    def logout(self):\n        # Your custom logic before logout\n        custom_cleanup()\n\n        response = super().logout()\n        return response\n</code></pre> </li> <li> <p>Security Considerations</p> <p>Ensure that only authenticated users can access the logout view by using the <code>@method_decorator(login_required)</code> decorator:</p> <pre><code>from django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom allauth.account.views import LogoutView\n\n@method_decorator(login_required, name='dispatch')\nclass CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n</code></pre> </li> </ol>"},{"location":"oop/traversing/logout_view/#how-does-it-work","title":"How Does It Work?","text":"<ol> <li> <p>Create a Subclass: Inherit from the imported <code>LogoutView</code>:</p> <pre><code>from allauth.account.views import LogoutView\n\nclass CustomLogoutView(LogoutView):\n    # code pending\n</code></pre> </li> <li> <p>Specify Custom Functionality: Override <code>LogoutView</code>'s default attributes with your custom configurations, such as the template:</p> <pre><code>class CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n</code></pre> </li> </ol>"},{"location":"oop/traversing/logout_view/#insights-clean-code","title":"Insights &amp; Clean Code","text":"Insights<pre><code># Import necessary modules and classes from Django and django-allauth\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom django.contrib import messages  \nfrom allauth.account.views import LogoutView  \n\n# Apply the login_required decorator to the dispatch method of CustomLogoutView\n@method_decorator(login_required, name='dispatch')\nclass CustomLogoutView(LogoutView):\n    \"\"\"Custom logout view that extends the functionality of LogoutView.\"\"\"\n\n    # Specify the template to be used for rendering the logout page\n    template_name = 'account/logout.html'\n</code></pre> <p>This code defines a custom Django view for logging out (<code>CustomLogoutView</code>) based on the <code>LogoutView</code> from the <code>django-allauth</code> package. Here's a step-by-step explanation:</p> <ol> <li> <p>Import Statements:</p> <ul> <li><code>from django.contrib.auth.decorators import login_required</code>: This import brings in the <code>login_required</code> decorator from Django. It ensures that only authenticated users can access the view.</li> <li><code>from django.utils.decorators import method_decorator</code>: This import is used to apply decorators to class-based views.</li> <li><code>from django.contrib import messages</code>: This import includes the messaging framework in Django, allowing you to display messages to users.</li> <li><code>from allauth.account.views import LogoutView</code>: This import brings in the <code>LogoutView</code> class from the <code>django-allauth</code> package, which handles the default logout behavior.</li> </ul> </li> <li> <p>Decorator Application:</p> <ul> <li><code>@method_decorator(login_required, name='dispatch')</code>: This decorator is applied to the <code>CustomLogoutView</code> class. It ensures that the <code>dispatch</code> method of the class (which is a standard entry point for a view) is decorated with the <code>login_required</code> decorator. This means that only authenticated users can access the <code>dispatch</code> method, effectively restricting access to the entire view.</li> </ul> </li> <li> <p>Class Definition:</p> <ul> <li><code>class CustomLogoutView(LogoutView):</code>: This line defines a new class, <code>CustomLogoutView</code>, which inherits from the <code>LogoutView</code> class provided by <code>django-allauth</code>. Inheriting from <code>LogoutView</code> allows you to extend and customize the default behavior of the logout process.</li> </ul> </li> <li> <p>Class Attributes:</p> <ul> <li><code>template_name = 'account/logout.html'</code>: This attribute specifies the template that should be used to render the HTML for the logout page. In this case, it points to <code>'account/logout.html'</code>.</li> </ul> </li> <li> <p>Docstring:</p> <ul> <li><code>\"\"\"This view renders our logout page.\"\"\"</code>: This is a docstring, a string used to document the purpose or behavior of the class. In this case, it indicates that the view is responsible for rendering the logout page.</li> </ul> </li> </ol> Clean Code<pre><code># In this case, we've chosen to deal with the redirection using LOGOUT_REDIRECT_URL in the settings.py\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom django.contrib import messages\nfrom allauth.account.views import LogoutView\n\n@method_decorator(login_required, name='dispatch')\nclass CustomLogoutView(LogoutView):\n    \"\"\"This view renders our logout page.\"\"\"\n    template_name = 'account/logout.html'\n</code></pre> <p>In summary, <code>CustomLogoutView</code> encapsulates the logic and configuration needed for a customized user logout process, building upon the foundation provided by <code>django-allauth</code>. Customize the view based on your project requirements, considering factors like user experience and security best practices.</p>"},{"location":"oop/traversing/product_service_view/","title":"HomepageProductServiceView","text":""},{"location":"oop/traversing/product_service_view/#homepageproductserviceview","title":"HomepageProductServiceView","text":"<p>I am very exiciting to explain the following code. Let's explore the HomepageProductServiceView class, understanding its structure and functionality in the context of a Django web application.</p>"},{"location":"oop/traversing/product_service_view/#what-is-it","title":"What is it?","text":"<p>It is a Django view class designed to display products and services on the homepage of a website. It inherits from <code>ProductBaseListView</code>, which is a specialized ListView for handling product data for the sake of modularity.</p> Code to Traverse <pre><code>from .models import Product, Service, Order\nfrom django.db.models import Count\n\nclass ProductBaseListView(ListView):\n    \"\"\"Base view for listing products based on these conditions.\"\"\"\n    model = Product\n\n    def get_queryset(self):\n        \"\"\"Return products with a status of 2, ordered by creation date.\"\"\"\n        products = Product.objects.filter(status=2).annotate(\n            likescount=Count('likes'),\n        ).order_by('-created_on')\n\n        return products\n\n\nclass HomepageProductServiceView(ProductBaseListView):\n    \"\"\"Frontend main page displaying the list of products &amp; services.\"\"\"\n    template_name = 'home/homepage.html'\n    context_object_name = 'products'\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        1. Slice product instances to 3 (from parent class)\n        2. Slice service instances to 3 (in current class)\n        3. Define variables for separation of concerns &amp; single view parameters\n        4. Define a combined list to mix them as needed\n        5. Fill single variables for a single display\n        6. Extend products and services to the combined list, slice,\n        and remove them for specific elements, avoiding redundancy and size\n        7. Define metric variables\n        8. Apply logic to the combined, product, and service rows\n        9. Add variables holding data to the context to access them from\n        the template\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n\n        products = list(context['products'][:3])\n        services = list(Service.objects.filter(\n            status=2).annotate(\n                likescount=Count('likes'),\n        ).order_by('-created_on')[:3])\n\n        product_single = []\n        service_single = []\n\n        combined_list = []\n\n        # 1 product, 1 services, 1 product INTENTION\n        if products and services:\n            product_single.extend(products[:3])\n            service_single.extend(services[:3])\n\n            combined_list.extend(products[:1])\n            products = products[2:]\n\n            combined_list.extend(services[:1])\n            services = services[3:]\n\n            combined_list.extend(products[:1])\n            products = products[1:]\n\n        # Deal with frontend Metrics (Like counts &amp; Purchases) consulting DB\n        order_count_combined = {}\n        order_count_product = {}\n        order_count_service = {}\n\n        for item in combined_list:\n            if item.instance == 0:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__product=item).count()\n                order_count_combined[item.title] = order_count\n            else:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__service=item).count()\n                order_count_combined[item.title] = order_count\n\n        for item in product_single:\n            if item.instance == 0:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__product=item).count()\n                order_count_product[item.title] = order_count\n\n        for item in service_single:\n            if item.instance == 1:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__service=item).count()\n                order_count_service[item.title] = order_count\n\n        # Add collected data to the context allowing access from the template\n        context['combined_items'] = combined_list\n        context['product_single'] = product_single\n        context['service_single'] = service_single\n        context['order_count_combined'] = order_count_combined\n        context['order_count_product'] = order_count_product\n        context['order_count_service'] = order_count_service\n        return context\n</code></pre> <ul> <li>Purpose: It's crafted to showcase a selection of products and services on the main page of the site.</li> </ul>"},{"location":"oop/traversing/product_service_view/#what-does-it-do","title":"What Does it Do?","text":"<p>Firstly, HomepageProductServiceView (Custom Context Data)  extends the functionality of ProductBaseListView (Filter Products) to:</p> <ol> <li> <p>Filter Products: The <code>get_queryset</code> method is used to filter products based on specific criteria, such as their status and the order of creation. Django automatically adds these objects to the context, making them accessible in the template as <code>product_list</code>. Subsequently, we can change this default name and add it back to the context using the <code>get_context_data()</code> method on the <code>HomepageProductServiceView</code>. Alternatively, this can be achieved by setting the <code>context_object_name</code> attribute in the view class.</p> <ul> <li>It is advisable to override it in this case, as we aim for a convenient and optimized interaction with our database.</li> </ul> HomepageProductServiceView<pre><code>class ProductBaseListView(ListView):\n    \"\"\"Base view for listing products based on these conditions.\"\"\"\n    model = Product\n\n    def get_queryset(self):\n        \"\"\"Return products with a status of 2, ordered by creation date.\"\"\"\n        products = Product.objects.filter(status=2).annotate(\n            likescount=Count('likes'),\n        ).order_by('-created_on')\n\n        return products\n</code></pre> <ul> <li>filter(): Used for retrieving database objects that meet our specific criteria.</li> <li>annotate(): Adds a temporary field to each object at the time of the query execution, without altering the database schema.</li> <li>Count(): Utilized for counting the number of 'likes' instances associated with each Product object. It always returns an integer.</li> <li><code>return products</code>: This returns a local variable with the Product's queryset. Django internally uses this returned queryset to populate the context with these objects. The context variable name is typically derived from the model name (in lowercase, suffixed with _list, e.g., product_list for a model named Product).</li> </ul> <p>In the context of Django's ORM (Object-Relational Mapping), this combination is commonly used in Django to efficiently retrieve and manipulate data from the database with added computations and filters.</p> </li> <li> <p>Custom Context Data: This overrides the <code>get_context_data</code> method to add custom data to the context. This process involves selecting a specific number of products and services, calculating metrics, and preparing them for display.</p> <p>This point might seem a bit tricky, but it's actually quite straightforward. We previously mentioned that we could change the default name used to access the <code>Products</code> object in the <code>context</code>. This can be achieved by either declaring the <code>context_object_name</code> in the <code>ProductBaseListView</code> class or in the <code>HomepageProductServiceView</code>. For the sake of consistency, I have chosen to do it in the latter.</p> get_context_data() &amp; super()<pre><code>class HomepageProductServiceView(ProductBaseListView):\n    \"\"\"Frontend main page displaying the list of products &amp; services.\"\"\"\n    template_name = 'home/homepage.html'\n    context_object_name = 'products'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # more code pending\n        return context\n</code></pre> <ul> <li>By using <code>get_context_data()</code>, we are performing method overriding, where a method in a child class has the same name as a method in its parent class. This is necessary because <code>HomepageProductServiceView</code> extends or modifies the functionality of the <code>get_context_data</code> method from its parent class, accessing the returned <code>context</code> dictionary.</li> <li>The overriding is done to customize or enhance the context data that is sent to the template. </li> <li>Within the overridden <code>get_context_data()</code> method, <code>super().get_context_data(**kwargs)</code> is used to call the same method from the parent class. This ensures that the base functionality of the method (as implemented in <code>ProductBaseListView</code>) is retained. This syntax should always be included.</li> <li>After this, we can start manipulating the <code>context</code> dictionary for our purposes, as seen with the <code>products</code> and <code>services</code> local variables.</li> </ul> Products &amp; Services Instances<pre><code>class HomepageProductServiceView(ProductBaseListView):\n    \"\"\"Frontend main page displaying the list of products &amp; services.\"\"\"\n    template_name = 'home/homepage.html'\n    context_object_name = 'products'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        products = list(context['products'][:3])\n        services = list(Service.objects.filter(\n            status=2).annotate(\n                likescount=Count('likes'),\n        ).order_by('-created_on')[:3])\n\n        # assignment pending\n        return context\n</code></pre> <ul> <li>Here, we process the local variables <code>products</code> and <code>services</code>, manipulating the database to select the exact instances we need.</li> <li>With our context dictionary ready, it's time to select our <code>products</code>. I access the <code>products</code> object within the <code>context</code> and select the first three instances using <code>[:3]</code>, which means from indices 0 to 2, totaling three instances. We convert these to a list using <code>list()</code> for immediate processing, instead of using the default <code>QuerySets</code> which are list-like and lazily evaluated.</li> <li>We don't perform as many operations on <code>products</code> as on <code>services</code> because most processing is already done in the parent class.</li> <li>For the <code>services</code> local variable, we follow a similar approach as with <code>products</code>, including slicing and converting the result to a list for all computations.</li> <li>We filter the <code>services</code> objects, annotate each instance with a temporary value, and then sort them by date using <code>-created_on</code>. The minus sign <code>-</code> indicates reverse order, showing the newest objects first. Without the <code>-</code>, it would return the oldest objects first.</li> </ul> </li> </ol>"},{"location":"oop/traversing/product_service_view/#how-does-it-work","title":"How Does It Work?","text":"<ol> <li> <p>Inheritance and Extension: Inherits from <code>ProductBaseListView</code> and extends its functionality for the specific needs of the homepage.</p> </li> <li> <p>Data Processing in <code>get_context_data</code>:</p> </li> <li>Slicing Instances: Limits the number of products and services displayed by slicing them.</li> <li>Separation of Concerns: Defines separate variables for products, services, and combined lists to manage them effectively.</li> <li>Combining Lists: Intelligently combines products and services into a single list for a diversified display.</li> <li> <p>Metrics Calculation: Computes metrics like likes and purchase counts for each item.</p> </li> <li> <p>Custom Logic Application:</p> </li> <li>Applies logic to arrange products and services in a particular order.</li> <li> <p>Ensures there's no redundancy in the items displayed.</p> </li> <li> <p>Context Enhancement:</p> </li> <li>Adds these processed lists and metrics to the context, making them accessible in the template.</li> </ol>"},{"location":"oop/traversing/product_service_view/#insights-clean-code","title":"Insights &amp; Clean Code","text":"HomepageProductServiceView<pre><code>class ProductBaseListView(ListView):\n    \"\"\"Base view for listing products based on these conditions.\"\"\"\n    model = Product\n\n    def get_queryset(self):\n        \"\"\"Return products with a status of 2, ordered by creation date.\"\"\"\n        products = Product.objects.filter(status=2).annotate(\n            likescount=Count('likes'),\n        ).order_by('-created_on')\n\n        return products\n\n\nclass HomepageProductServiceView(ProductBaseListView):\n    \"\"\"Frontend main page displaying the list of products &amp; services.\"\"\"\n    template_name = 'home/homepage.html'\n    context_object_name = 'products'\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        1. Slice product instances to 3 (from parent class)\n        2. Slice service instances to 3 (in current class)\n        3. Define variables for separation of concerns &amp; single view parameters\n        4. Define a combined list to mix them as needed\n        5. Fill single variables for a single display\n        6. Extend products and services to the combined list, slice,\n        and remove them for specific elements, avoiding redundancy and size\n        7. Define metric variables\n        8. Apply logic to the combined, product, and service rows\n        9. Add variables holding data to the context to access them from\n        the template\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n\n        products = list(context['products'][:3])\n        services = list(Service.objects.filter(\n            status=2).annotate(\n                likescount=Count('likes'),\n        ).order_by('-created_on')[:3])\n\n        product_single = []\n        service_single = []\n\n        combined_list = []\n\n        # 1 product, 1 services, 1 product INTENTION\n        if products and services:\n            product_single.extend(products[:3])\n            service_single.extend(services[:3])\n\n            combined_list.extend(products[:1])\n            products = products[2:]\n\n            combined_list.extend(services[:1])\n            services = services[3:]\n\n            combined_list.extend(products[:1])\n            products = products[1:]\n\n        # Deal with frontend Metrics (Like counts &amp; Purchases) consulting DB\n        order_count_combined = {}\n        order_count_product = {}\n        order_count_service = {}\n\n        for item in combined_list:\n            if item.instance == 0:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__product=item).count()\n                order_count_combined[item.title] = order_count\n            else:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__service=item).count()\n                order_count_combined[item.title] = order_count\n\n        for item in product_single:\n            if item.instance == 0:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__product=item).count()\n                order_count_product[item.title] = order_count\n\n        for item in service_single:\n            if item.instance == 1:\n                order_count = Order.objects.filter(\n                    status=2, lineitems__service=item).count()\n                order_count_service[item.title] = order_count\n\n        # Add collected data to the context allowing access from the template\n        context['combined_items'] = combined_list\n        context['product_single'] = product_single\n        context['service_single'] = service_single\n        context['order_count_combined'] = order_count_combined\n        context['order_count_product'] = order_count_product\n        context['order_count_service'] = order_count_service\n        return context\n</code></pre> <p>This structure allows the <code>HomepageProductServiceView</code> to:</p> <ul> <li>Efficiently Display Data: By processing and preparing the data in the backend, it ensures an efficient and tailored display on the frontend.</li> <li>Leverage Django's Features: Utilizes Django's powerful ORM and class-based views for effective data handling and presentation.</li> <li>Maintain Clean and Readable Code: Keeps the code organized and easy to understand, facilitating future modifications and enhancements.</li> </ul> <p>In summary, <code>HomepageProductServiceView</code> is a well-structured Django class that demonstrates effective use of inheritance, method overriding, and context management to display a curated list of products and services on a website's homepage.</p>"},{"location":"oop/traversing/signup_view/","title":"CustomSignupView","text":""},{"location":"oop/traversing/signup_view/#signupview","title":"SignupView","text":"<p>Today, let's delve into the intricacies of your <code>CustomSignupView</code>. Just like the CustomLoginView, this view extends the functionality of a base class, in this case, the <code>SignupView</code> from <code>django-allauth</code>. Let's break it down:</p> <pre><code>class CustomSignupView(SignupView):\n    \"\"\"This view renders our custom signup form\"\"\"\n    form_class = CustomSignupForm\n    template_name = 'account/signup.html'\n</code></pre>"},{"location":"oop/traversing/signup_view/#what-is-it","title":"What is it?","text":"<p>Similar to the CustomLoginView, the <code>CustomSignupView</code> inherits from a class provided by the <code>django-allauth</code> package, specifically the <code>SignupView</code>. This allows you to customize the signup process according to your project's needs:</p> <p>That said, you'll need to install the package beforehand:</p> <pre><code>pip install django-allauth\n</code></pre> <ul> <li>This additional layer of functionality allows for features like social authentication and email verification.</li> </ul> <pre><code>from allauth.account.views import SignupView\n</code></pre> <p>If you choose not to install it, you will retain the core functionality described below, minus the additional features provided by <code>allauth</code>.</p> Quote <p>The process is simple: install <code>django-allauth</code>, inherit from its <code>SignupView</code>, and override the default attributes to customize it according to your needs.</p>"},{"location":"oop/traversing/signup_view/#what-does-it-do","title":"What Does it Do?","text":"<p>The primary purpose of <code>CustomSignupView</code> is to handle the user registration or signup process. By inheriting from <code>SignupView</code>, you leverage the functionality provided by the <code>django-allauth</code> package to streamline the signup experience.</p> <p>Here are the key aspects:</p> <ol> <li> <p>Form Handling: The <code>form_class</code> attribute specifies the custom form (<code>CustomSignupForm</code>) that will be used for user input during the signup process. This allows you to collect specific information from users based on your project's requirements.</p> </li> <li> <p>Template Rendering: The <code>template_name</code> attribute designates the template (<code>'account/signup.html'</code>) where the signup form, along with any associated HTML, JavaScript, and CSS, will be rendered. This separation of concerns enhances maintainability and allows for a clean presentation layer.</p> </li> <li> <p>Customized Feedback: In the <code>form_valid</code> and <code>form_invalid</code> methods, you customize the feedback messages displayed to the user after a successful signup or in case of errors. For example, the success message welcomes the user by their username and informs them that the account has been created successfully. On the other hand, the error message alerts the user if there are issues with the signup information.</p> </li> <li> <p>Superclass Integration: The use of <code>super().form_valid(form)</code> and <code>super().form_invalid(form)</code> ensures that you're building on top of the existing functionality provided by the <code>SignupView</code>. This is a common practice in object-oriented programming, allowing you to extend the behavior of the parent class while preserving its core functionality.</p> </li> </ol> <p>In summary, <code>CustomSignupView</code> encapsulates the logic and configuration needed for a customized user signup process, building upon the foundation provided by <code>django-allauth</code> and promoting clean, maintainable code.</p>"},{"location":"oop/traversing/signup_view/#how-does-it-work","title":"How Does It Work?","text":"<ol> <li>Create a Subclass: Inherit from the imported <code>SignupView</code>:</li> </ol> <pre><code>from allauth.account.views import SignupView\n\nclass CustomSignupView(SignupView):\n    # code pending\n</code></pre> <ol> <li>Specify Custom Functionality: Override <code>SignupView</code>'s default attributes with your custom configurations:</li> </ol> <pre><code>from .forms import CustomSignupForm\n\nclass CustomSignupView(SignupView):\n    form_class = CustomSignupForm\n</code></pre> <p>Here, just like in the login view, you're importing a custom form to override the default form provided by <code>django-allauth</code>.</p> <ol> <li>Specify the Template:</li> </ol> <pre><code>class CustomSignupView(SignupView):\n    \"\"\"This view renders our custom signup form\"\"\"\n    form_class = CustomSignupForm\n    template_name = 'account/signup.html'\n</code></pre> <p>This line designates the template where your custom signup form, HTML, JavaScript, and CSS will be rendered.</p>"},{"location":"oop/traversing/signup_view/#insights-clean-code","title":"Insights &amp; Clean Code","text":"Insights<pre><code>from django.contrib import messages\n\nclass CustomSignupView(SignupView):\n    form_class = CustomSignupForm\n    template_name = 'account/signup.html'\n\n    def form_valid(self, form):\n        response = super().form_valid(form)\n        username = form.cleaned_data.get('username')\n        messages.success(self.request, f'Welcome, {username}! Your account has been created successfully.')\n        return response\n\n    def form_invalid(self, form):\n        messages.error(self.request, 'Signup failed. Please check your information and try again.')\n        return super().form_invalid(form)\n</code></pre> <p>In the <code>form_valid</code> and <code>form_invalid</code> methods, you're essentially doing the same logic as in the login view. The <code>response = super().form_valid(form)</code> line, again, captures the result of the superclass's <code>form_valid</code> method:</p> <p>The <code>response = super().form_valid(form)</code> performs the following functions:</p> <ol> <li><code>super()</code>: This returns a temporary object of the superclass, allowing you to call its methods.</li> <li><code>.form_valid(form)</code>: This calls the form_valid method of the superclass. In Django, this method usually handles what to do with a valid form, such as saving a model object.</li> <li><code>response =</code>: This stores the result of <code>super().form_valid(form)</code>\u2014often an HttpResponse object like a redirect\u2014in the variable <code>response</code>.</li> </ol> <p>The <code>form</code> argument passed into <code>form_valid</code> and <code>form_invalid</code> is an instance of <code>CustomLoginForm</code>, as specified by <code>form_class</code>.</p> <p>The <code>cleaned_data</code> object is created after form validation upon submission. You can then use <code>.get()</code> to retri</p> Clean Code<pre><code>from django.contrib import messages\nfrom allauth.account.views import SignupView\n\nclass CustomSignupView(SignupView):\n    form_class = CustomSignupForm\n    template_name = 'account/signup.html'\n\n    def form_valid(self, form):\n        response = super().form_valid(form)\n        username = form.cleaned_data.get('username')\n        messages.success(self.request, f'Welcome, {username}! Your account has been created successfully.')\n        return response\n\n    def form_invalid(self, form):\n        messages.error(self.request, 'Signup failed. Please check your information and try again.')\n        return super().form_invalid(form)\n</code></pre> <p>By keeping your code DRY (Don't Repeat Yourself), you ensure that any future changes or updates only need to be made in one place, promoting maintainability and reducing the likelihood of introducing bugs.</p>"},{"location":"snack/overview/","title":"Overview","text":"<p>Developer's Snack is a section I developed over time because I found that various rules, standards, and code snippets were easy to forget. For that reason, I decided to create guidelines and extra documentation for myself, where I could return for that knowledge or inspiration. That's how Developer's Snack came into existence, and since then, I've applied the same section to all my projects.</p> <p>As you can see in the navbar of this section, there are different entries that are useful not only for me but for the entire community as well.</p> <p>Feel free to navigate around and find what you need!</p> Support <p> </p>"},{"location":"snack/initialize/initial/","title":"Initialize MkDocs","text":""},{"location":"snack/initialize/initial/#setting-up-your-project","title":"Setting Up Your Project","text":"CLI/Bash <p>Please note how we make use of Gitpod CLI (Command-line interface) or Bash throughout the process.</p>"},{"location":"snack/initialize/initial/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Use Code Institute's Gitpod Full Template: Use the template from Code Institute found at Gitpod Full Template to initialize your Gitpod workspace.</p> <p>Note: Don't forget to install Django to avoid specific errors such as <code>ValueError: ZoneInfo keys may not be absolute paths, got: /UTC</code>.</p> <pre><code>pip3 install 'django&lt;4' gunicorn psycopg2\n# `gunicorn` &amp; `psycopg2` are optional\n</code></pre> </li> </ol>"},{"location":"snack/initialize/initial/#installing-mkdocs-and-dependencies","title":"Installing MkDocs and Dependencies","text":"<ol> <li> <p>Install MkDocs: To create your project documentation.</p> <pre><code>pip install mkdocs\n</code></pre> </li> <li> <p>If you don't see the <code>docs</code> folder automatically created then you need to initialize mkdocs manually:</p> <pre><code>mkdocs new .\n</code></pre> </li> <li> <p>Install MkDocs Material: This is the theme used for MkDocs.</p> <pre><code>pip install mkdocs-material\n\n# Do not forget\npip3 freeze &gt; requirements.txt\n</code></pre> </li> <li> <p>Test MkDocs: Ensure everything is working as expected, if not, reinstall Django, mkdocs &amp; mkdocs-material.</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Important: Remove <code>.github/</code> from the <code>.gitignore</code> file. It is important to set up the docs with Github Pages:</p> <pre><code>core.Microsoft*\ncore.mongo*\ncore.python*\nenv.py\n__pycache__/\n*.py[cod]\nnode_modules/\ncloudinary_python.txt\n</code></pre> </li> <li> <p>Push Changes to GitHub: follow the standards!</p> <pre><code>git add .\ngit commit -m \"Initial Commit\"\ngit push\n</code></pre> </li> </ol>"},{"location":"snack/initialize/initial/#setting-up-github-actions","title":"Setting Up GitHub Actions","text":""},{"location":"snack/initialize/initial/#create-github-actions-workflow","title":"Create GitHub Actions Workflow","text":"<ol> <li> <p>Create <code>.github</code> Folder: This folder will contain your GitHub workflows.</p> <pre><code>mkdir .github\n</code></pre> </li> <li> <p>Navigate to <code>.github</code> Folder</p> <pre><code>cd .github\n</code></pre> </li> <li> <p>Create <code>workflows</code> Folder: This folder will contain your workflow files.</p> <pre><code>mkdir workflows\n</code></pre> </li> <li> <p>Go Back to Main Directory</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>Create <code>ci.yml</code> File: This file defines your CI (Continuous Integration)/CD (Continuous Deployment/Delivery) pipeline.</p> <pre><code>touch ci.yml\n</code></pre> <p>Add the Following Content to <code>ci.yml</code>:</p> <pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: actions/cache@v2\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: pip install mkdocs-material\n      - run: pip install pillow cairosvg\n      - run: mkdocs gh-deploy --force\n</code></pre> </li> <li> <p>Move <code>ci.yml</code> to <code>workflows</code> Directory: This makes sure GitHub Actions recognizes your workflow.</p> <pre><code>mv ci.yml .github/workflows/\n</code></pre> </li> <li> <p>Push Changes to GitHub</p> <pre><code>git add .\ngit commit -m \"Setup GitHub Actions\"\ngit push\n</code></pre> </li> </ol>"},{"location":"snack/initialize/initial/#final-configuration-on-github","title":"Final Configuration on GitHub","text":"<ol> <li>Navigate to Your Repository's Settings: Then go to the \"Pages\" section.</li> <li>Configure Build and Deployment: Under 'Build and Deployment', select 'Deploy from a branch' then choose the <code>source</code> as <code>'gh-pages'</code> do not change the <code>/ (root)</code> and click the 'Save' button.</li> <li>Find URL: Go back to GitHub Actions and check the process <code>pages build and deployment</code> once it is completed (green). Access it to find your URL at the <code>build-deploy</code> level.</li> </ol>"},{"location":"snack/initialize/initial/#style-your-documentation","title":"Style Your Documentation","text":"<p>Enhance your documentation with the following sample code by updating the <code>mkdocs.yml</code> file:</p> <ul> <li>DjangoViews Mkdocs Material Style</li> </ul> <p>Your GitHub Actions workflow should start automatically. It usually takes a few minutes to deploy. You can check the progress in the \"Actions\" tab on your GitHub repository. Once the action is complete, your MkDocs documentation will be available on your GitHub Pages URL.</p>"},{"location":"snack/initialize/initial/#logo-favicon","title":"Logo &amp; Favicon","text":"<p>First, ensure that you have created a folder named <code>assets/</code> within the mkdocs folder. This should be the subfolder where <code>index.md</code> is located, not the main one. Within the <code>assets/</code> folder, create additional subfolders, such as <code>img/</code>. Your goal is to have the path  <code>docs/assets/img/logo.png</code> for your logo and favicon.</p> <p>Next, go to your <code>mkdocs.yml</code> file and add the following lines under the <code>theme:</code> entry:</p> <pre><code>theme:\n  logo: assets/img/logo.png\n  favicon: assets/img/logo.png\n</code></pre>"},{"location":"snack/initialize/initial/#update-mkdocs-mkdocs-material","title":"Update Mkdocs &amp; Mkdocs Material","text":"<p>If you want to update all extensions please use the following code:</p> <pre><code>pip install --upgrade mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"snack/initialize/initial/#install-mathjax","title":"Install MathJax","text":"<p>MathJax and KaTeX are two popular libraries for displaying mathematical content in browsers. Although both libraries offer similar functionality, they use different syntaxes and have different configuration options. This documentation site provides information on how to integrate them with Material for MkDocs easily. For more visit Mkdocs Material</p> <p>MathJax is a powerful and flexible library that supports multiple input formats, such as LaTeX, MathML, AsciiMath, as well as various output formats like HTML, SVG, MathML. To use MathJax within your project, add the following lines to your mkdocs.yml:</p> <ul> <li>First, add this Javascript code:</li> </ul> <pre><code>// LOCATION: docs/javascripts/mathjax.js\n\nwindow.MathJax = {\n  tex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  }\n};\n\ndocument$.subscribe(() =&gt; { \n  MathJax.typesetPromise()\n})\n</code></pre> <ul> <li>Second, add this yml code:</li> </ul> <pre><code># LOCATION: mkdocs.yml\n\nmarkdown_extensions:\n  - pymdownx.arithmatex:\n      generic: true\n\nextra_javascript:\n  - javascripts/mathjax.js\n  - https://polyfill.io/v3/polyfill.min.js?features=es6\n  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n</code></pre>"},{"location":"snack/initialize/initial/#bug-zoneinfo","title":"Bug - ZoneInfo","text":"<p>To avoid the <code>ValueError: ZoneInfo keys may not be absolute paths, got: /UTC</code> please install Django as described above.</p>"},{"location":"snack/polymorphism/polymorphism/","title":"Cracking Polymorphism","text":""},{"location":"snack/polymorphism/polymorphism/#what-is-it","title":"What Is It?","text":"<p>Polymorphism is a fundamental concept in object-oriented programming (OOP) that encompasses various mechanisms and allows objects/instances of different classes to be treated as the objects of a common super class. The term comes from the Greek words <code>poly</code>, meaning many, and <code>morphe</code>, meaning form.</p> <p>In short, polymorphism permits you to write code snippet that works on \"many forms\" of data by <code>inheritance</code> and the <code>passing of parameters</code>, achieving different results, making it more flexible, less verbose and extensible.</p> Quote <p>\"The capacity to pass parameters in a way that enables polymorphism is a feature supported at the language level.\"</p>"},{"location":"snack/polymorphism/polymorphism/#types-of-polymorphism","title":"Types of Polymorphism","text":"1. Compile-Time Polymorphism (Static) <ul> <li>Also known as method overloading.</li> <li>Occurs at compile time.</li> <li>Same method name, different parameters.</li> </ul> 2. Run-Time Polymorphism (Dynamic) <ul> <li>Also known as method overriding.</li> <li>Occurs at runtime.</li> <li>Uses inheritance and virtual functions in languages like C++ or method overriding in languages like Java and Python.</li> </ul>"},{"location":"snack/polymorphism/polymorphism/#what-does-it-do","title":"What Does It Do?","text":"<p>The idea behind polymorphism is to promote code reusability and make the code more maintainable and extendable. When you write code that can work with objects of different types/classes, you can add new types without modifying existing code. This allows for a more modular and organized structure.</p> Python Example: Run-Time Polymorphism <p>In this Python example, the function <code>animal_sound</code> doesn't need to know the type of <code>animal</code>; it calls the <code>make_sound</code> method on whatever object is passed to it. This is possible because of polymorphism.</p> JavaScript Example: Run-Time Polymorphism <p>Here, the JavaScript example also demonstrates run-time polymorphism in a manner similar to the Python example. The function <code>animalSound</code> operates on any object that has a <code>makeSound</code> method, showcasing the power and flexibility of polymorphism.</p>"},{"location":"snack/polymorphism/polymorphism/#python-example","title":"Python Example","text":"<pre><code># Define the superclass\nclass Animal:\n    def make_sound(self):\n        return \"Some generic sound\"\n\n# Define the subclasses\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Woof\"\n\nclass Cat(Animal):\n    def make_sound(self):\n        return \"Meow\"\n\n# Initialize polymorphism\ndef animal_sound(animal):\n    print(animal.make_sound())\n\n# Test\na = Animal()\nd = Dog()\nc = Cat()\n\nanimal_sound(a)  # Output: Some generic sound\nanimal_sound(d)  # Output: Woof\nanimal_sound(c)  # Output: Meow\n</code></pre>"},{"location":"snack/polymorphism/polymorphism/#javascript-example","title":"JavaScript Example","text":"<pre><code>// Define the superclass\nclass Animal {\n    makeSound() {\n        return \"Some generic sound\";\n    }\n}\n\n// Define the subclasses\nclass Dog extends Animal {\n    makeSound() {\n        return \"Woof\";\n    }\n}\n\nclass Cat extends Animal {\n    makeSound() {\n        return \"Meow\";\n    }\n}\n\n// Initialize polymorphism\nfunction animalSound(animal) {\n    console.log(animal.makeSound());\n}\n\n// Test\nconst a = new Animal();\nconst d = new Dog();\nconst c = new Cat();\n\nanimalSound(a);  // Output: Some generic sound\nanimalSound(d);  // Output: Woof\nanimalSound(c);  // Output: Meow\n</code></pre>"},{"location":"snack/polymorphism/polymorphism/#how-does-is-it-work","title":"How Does Is It Work?","text":"<p>It's all about writing code that's more generic, thereby making it flexible, extensible, less verbose, and maintainable. By treating different objects as instances of their common superclass, you can write functions or methods that can work with a wide range of data types. This means you can add new subclasses or modify existing ones without changing the code that calls these objects, adhering to the Open/Closed Principle\u2014one of the SOLID principles of object-oriented design, which states that \"software entities should be open for extension but closed for modification.\"</p> Inheritance &amp; Polymorphism Methods in Polymorphism The Benefits <ul> <li>Here's another small Python code snippet to emphasize the reusability and flexibility:</li> </ul> Python Example: Math <p>In this example, <code>get_area()</code> is a generic function that can compute the area for any shape that follows the contract set by the <code>Shape</code> class, demonstrating polymorphism.</p>"},{"location":"snack/polymorphism/polymorphism/#inheritance","title":"Inheritance","text":"<p>The relationship between inheritance and polymorphism: Inheritance sets up the hierarchical relationship between a superclass and its subclasses, while polymorphism leverages this relationship to allow objects of different classes to be treated as objects of a common superclass.</p> <p>Here's a breakdown to emphasize the connection:</p> <ol> <li> <p>Inheritance: Through inheritance, subclasses inherit the attributes and behaviors (methods) of the superclass. This allows us to establish a \"is-a\" relationship between the subclass and the superclass (e.g., a Dog \"is-a\" Animal).</p> </li> <li> <p>Polymorphism: Building upon this inheritance relationship, polymorphism allows us to use a generic type (usually the superclass type) to work with objects of any subclass derived from that superclass. This is achieved through overriding methods in the subclass, allowing for specific behaviors.</p> </li> <li> <p>Method Invocation: When you call a method on a superclass reference that points to a subclass object, the subclass version of the method is invoked. This is known as dynamic method dispatch, and it happens at runtime.</p> </li> <li> <p>Independent Function with Generic Parameter: As pointed out, a separate, independent function can take a parameter, allowing it to work with objects of any subclass type. This function can then call the common method (e.g., <code>makeSound()</code>), and the appropriate subclass implementation will be executed.</p> </li> </ol>"},{"location":"snack/polymorphism/polymorphism/#methods","title":"Methods","text":"<ol> <li> <p>Method Overloading (Static/Compile-Time Polymorphism): Multiple methods within the same class have the same name but different parameters. The correct method to be called is determined at compile-time based on the method signature.</p> </li> <li> <p>Method Overriding (Dynamic/Run-Time Polymorphism): A subclass provides a new implementation for a method that is already defined in its superclass or one of its superclasses. The method in the subclass overrides the method in the superclass, and the version of the method to be called is determined at run-time based on the object's actual class.</p> </li> </ol>"},{"location":"snack/polymorphism/polymorphism/#key-benefits","title":"Key Benefits","text":"<ul> <li> <p>Code Reusability: You can write a function once and use it on different types of objects, reducing code duplication.</p> </li> <li> <p>Loose Coupling: Polymorphism allows you to write code that doesn't need to know the exact type of the object it's interacting with, making the system more modular.</p> </li> <li> <p>Ease of Maintenance and Extensibility: You can easily extend the code with new types without changing existing logic.</p> </li> </ul>"},{"location":"snack/polymorphism/polymorphism/#python-example_1","title":"Python Example","text":"<pre><code>class Shape:\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14159 * (self.radius ** 2)\n\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\ndef get_area(shape):\n    return shape.area()\n\n# Test\ncircle = Circle(5)\nrectangle = Rectangle(4, 6)\n\nprint(get_area(circle))  # Output: 78.53975\nprint(get_area(rectangle))  # Output: 24\n</code></pre>"},{"location":"snack/polymorphism/polymorphism/#duck-typing-polymorphism","title":"Duck Typing &amp; Polymorphism","text":"Quote <p>Python's \"duck typing\" is a form of polymorphism where the type or class of an object is less important than the methods it defines.</p> <p>Duck typing and polymorphism are closely related concepts, and duck typing can be seen as a form of polymorphism. Both concepts deal with how objects of different types can be used interchangeably in a flexible and dynamic manner, but they manifest differently depending on the type system of the programming language.</p>"},{"location":"snack/polymorphism/polymorphism/#duck-typing","title":"Duck Typing","text":"<ul> <li>Duck typing is a concept often associated with dynamically typed languages like Python and Ruby.</li> <li>It focuses on the behavior and capabilities of objects rather than their specific types (Class names).</li> <li>The term \"duck typing\" is often summarized with the phrase: \"If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.\" In other words, an object is judged by what it can do (its methods and properties) rather than by its formal type.</li> <li>Duck typing allows you to work with objects based on their behavior, and it doesn't require explicit type declarations or inheritance hierarchies.</li> </ul>"},{"location":"snack/polymorphism/polymorphism/#polymorphism","title":"Polymorphism","text":"<ul> <li>Polymorphism is a broader concept found in object-oriented programming (OOP) languages, including both statically and dynamically typed languages like Java, C++, Python, and JavaScript.</li> <li>Polymorphism encompasses various mechanisms that allow objects of different types to be treated as objects of a common superclass or to respond to a common interface.</li> <li>It often involves inheritance, method overriding, and explicit type hierarchies to enable the use of subclasses in place of their superclass.</li> <li>Polymorphism can be compile-time (static) or run-time (dynamic) and is a core feature of OOP.</li> </ul> <p>So, while duck typing is a specific manifestation of polymorphism in dynamically typed languages, polymorphism as a broader concept applies to a wide range of programming paradigms and type systems, including statically typed languages where the type is explicitly declared and checked at compile time. Both concepts share the common goal of promoting code flexibility and reusability by allowing objects to be treated generically based on their capabilities rather than their specific types.</p> Python Example: Duck Typing in Python <p>The example above doesn't explicitly demonstrate inheritance, but it does illustrate a concept closely related to inheritance, which is polymorphism through duck typing. In this example, there's no explicit inheritance hierarchy defined, but there's an implicit form of \"inherited\" behavior through the <code>speak()</code> method.</p> <p>While traditional inheritance-based polymorphism has its advantages in enforcing a structured and organized class hierarchy, duck typing offers a more flexible and less formal way of achieving polymorphism in dynamically typed languages. It allows for more spontaneous and behavior-driven object interactions without the need for a predefined class hierarchy.</p>"},{"location":"snack/polymorphism/polymorphism/#python-example_2","title":"Python Example","text":"<pre><code># Duck Typing\nclass Dog:\n    def speak(self):\n        return \"Woof\"\n\nclass Cat:\n    def speak(self):\n        return \"Meow\"\n\nclass Duck:\n    def speak(self):\n        return \"Quack\"\n\ndef animal_speak(animal):\n    print(animal.speak())\n\n# Test\nanimal_speak(Dog())  # Output: Woof\nanimal_speak(Cat())  # Output: Meow\nanimal_speak(Duck())  # Output: Quack\n</code></pre>"}]}